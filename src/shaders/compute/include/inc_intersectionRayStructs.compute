#ifndef __INTERSECTION_RAY_STRUCTS_COMPUTE
#define __INTERSECTION_RAY_STRUCTS_COMPUTE

//IntersectionRay

////////////////////////////////////////////////////////////////////
////////
////////	Constants
////////
////////////////////////////////////////////////////////////////////

const uint RAY_FLAG_SHADOW		= 1 << 1;
const uint RAY_FLAG_POSITION	= 1 << 2;
const uint RAY_FLAG_NORMAL		= 1 << 3;
const uint RAY_FLAG_UV			= 1 << 4;
const uint RAY_FLAG_MATERIAL	= 1 << 5;
const uint RAY_FLAG_REFLECTION	= 1 << 6;

const float FLT_EPSILON = 1e-23f;
const float FLT_MAX = 1.0f/0.0f;
const float FLT_MIN = -1.0f/0.0f;

////////////////////////////////////////////////////////////////////
////////
////////	Structs
////////
////////////////////////////////////////////////////////////////////

//A ray just contains it's origin and direction as vec4 for buffer alignment.
//SizeOf: 32B
struct Ray
{
	vec4 origin;
	vec4 direction;
	ivec2 pixel;
	vec2 padding;
};

//An intersection is a small container to hold the barycentric hit coordinates 
//and the index of the hit triangle.
//SizeOf: 16B
struct Intersection
{
	vec3 barycentric;
	uint triangle_index;
	ivec2 pixel;
	int mat_flags;
	float t;
};

////////////////////////////////////////////////////////////////////
////////
////////	Helper defines
////////	Defines have no overhead at all at runtime.
////////
////////////////////////////////////////////////////////////////////

#define fromBarycentric(barycentric, array, triangle) (barycentric.x * array[triangle.i1] + \
		barycentric.y * array[triangle.i2] + \
		barycentric.z * array[triangle.i0])

#define triangleOf(intersection) triangles.data[intersection.triangle_index]
#define materialOf(triangle) materials.data[triangle.mat_id]

#endif //__INTERSECTION_RAY_STRUCTS_COMPUTE