#ifndef __RANDOM_COMPUTE
#define __RANDOM_COMPUTE

//Random

////////////////////////////////////////////////////////////////////
////////
////////	Defines
////////
////////////////////////////////////////////////////////////////////
#define PI 3.14159265359
#define ONE_OVER_PI 0.31830988618
#define QUARTER_PI 0.78539816339
#define HALF_PI 1.57079632679


////////////////////////////////////////////////////////////////////
////////
////////	Functions
////////
////////////////////////////////////////////////////////////////////
//Method to generate a pseudo-random seed.
uint WangHash(in uint a)
{
	a = (a ^ 61) ^ (a >> 16);
	a = a + (a << 3);
	a = a ^ (a >> 4);
	a = a * 0x27d4eb2d;
	a = a ^ (a >> 15);
	return a;
}

// Hammersley Point Set
float radicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10f;
}

vec2 hammersley2d(uint current_sample, float inv_max_samples)
{
	return vec2(float(current_sample) * inv_max_samples, radicalInverse_VdC(current_sample));
}

//Sampling
vec3 cosineHemisphereSample(float u, float v)
{
	/*float phi = v * 2.f * PI;
	float cosTheta = sqrt(1.f - u);
	float sinTheta = sqrt(1.f - cosTheta * cosTheta);
	return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);*/
	// (Uniformly) sample a point on the unit disk
    float r = sqrt(u);
    float theta = 2 * PI * v;
    float x = r * cos(theta);
    float y = r * sin(theta);

    // Project point up to the unit sphere
    float z = sqrt(max(0.f, 1 - x * x - y * y));
    return vec3(x, y, z);
}

vec3 sampleAngle(float u, float v, float max_angle)
{
	float phi = v * 2.f * PI;
	float cosTheta = 1.0f - u * (1.0f - cos(max_angle));
	float sinTheta = sqrt(1.f - cosTheta * cosTheta);
	return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

vec3 uniformSphereSample(float u, float v)
{
	float phi = v * 2.f * PI;
	float cosTheta = 2 * u - 1;
	float sinTheta = sqrt(max(0, 1 - cosTheta * cosTheta));
	return vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
}

vec3 sampleDisk (float u, float v, vec3 normal, float radius)
{
    // Sample a point on a unit disk
    float r = sqrt(u);
    float theta = 2 * PI * v;
    float x = r * cos(theta);
    float y = r * sin (theta);

	// multiply radius
    vec3 dir = vec3( radius * x, radius * y, 0 );

    // Create an orthonormal basis around the surface normal
   vec3 s = abs(normal.x) > abs(normal.y) ?
            vec3(-normal.z, 0, normal.x) / sqrt(normal.x * normal.x + normal.z * normal.z):
            vec3(0, normal.z, -normal.y) / sqrt(normal.y * normal.y + normal.z * normal.z);
   vec3 t = cross(normal, s);

    // Transform into local shading coordinate system
    return dir.x * s + dir.y * t;
}

uint rng_state = 0;
uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

#endif //__RANDOM_COMPUTE