vec3 localSample(const in Intersection hit, const in vec3 local_input_ray, const in vec3 normal, const in vec2 sampling, inout vec3 local_output_ray, inout float output_pdf, inout int mat_flags)
{
	Triangle tri = triangleOf(hit);
	Material material = materialOf(tri);
	vec2 uv = fromBarycentric(hit.barycentric, uvs.data, tri);
	
	float rad = radians(180.0f - (1.0f - getMaterialFloatParam(material.roughness, uv)) * 180.0f);
	vec3 reflected = reflect(-local_input_ray, faceforward(normal, -local_input_ray, normal));
	vec3 sampledPoint = sampleAngle(sampling.x, sampling.y, rad);
	
	local_output_ray = localToWorldNormal(sampledPoint, reflected);
	
	if(dot(local_output_ray, faceforward(normal, -local_input_ray, normal)) < 0.0f)
	{
		local_output_ray = localToWorldNormal(sampledPoint * vec3(-1, -1, 1), reflected);
	}
	
	output_pdf = 1;
	
	mat_flags |= MATFLAG_SPECULAR_BOUNCE;
	return getMaterialColorParam(material.specular, uv).xyz / abs(dot(local_output_ray, normal));
}

vec3 evaluateLight(const in Intersection intersection, const in vec3 local_input_ray, const in vec3 local_output_ray)
{
	return vec3(0);
}